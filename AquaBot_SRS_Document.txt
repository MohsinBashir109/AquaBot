================================================================================
                    AQUABOT - SOFTWARE REQUIREMENTS SPECIFICATION
================================================================================

DOCUMENT INFORMATION:
- Project Name: AquaBot - Smart Irrigation Management System
- Version: 1.0.0
- Document Type: Software Requirements Specification (SRS)
- Date: December 2024
- Technology Stack: React Native (Frontend), .NET Core (Backend)
- Target Platforms: Android, iOS

================================================================================
1. INTRODUCTION
================================================================================

1.1 Purpose
----------
This document provides a comprehensive specification for the AquaBot application, 
a smart irrigation management system designed to help farmers optimize water usage 
through AI-powered field analysis and intelligent irrigation recommendations.

1.2 Scope
---------
AquaBot is a cross-platform mobile application that provides:
- AI-powered field analysis through image recognition
- Smart irrigation scheduling and recommendations
- User authentication and profile management
- Real-time weather and soil condition monitoring
- Government guidelines and best practices

1.3 Technology Stack
-------------------
Frontend:
- React Native 0.81.0
- TypeScript
- Redux Toolkit for state management
- React Navigation for navigation
- AsyncStorage for local data persistence

Backend:
- .NET Core Web API
- Entity Framework Core
- JWT Authentication
- Image processing and AI analysis

================================================================================
2. SYSTEM ARCHITECTURE
================================================================================

2.1 Overall Architecture
-----------------------
The AquaBot system follows a client-server architecture with the following components:

┌─────────────────────────────────────────────────────────────────┐
│                        AQUABOT SYSTEM ARCHITECTURE              │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ┌─────────────────┐    ┌─────────────────┐    ┌──────────────┐ │
│  │   React Native  │    │   .NET Core    │    │   External   │ │
│  │   Mobile App    │◄──►│   Web API      │◄──►│   Services   │ │
│  │                 │    │                 │    │              │ │
│  │ • Authentication│    │ • JWT Auth      │    │ • Weather API│ │
│  │ • Image Capture │    │ • Image Analysis│    │ • AI Services│ │
│  │ • State Mgmt    │    │ • Data Storage  │    │ • Maps API   │ │
│  │ • UI Components │    │ • Business Logic│    │              │ │
│  └─────────────────┘    └─────────────────┘    └──────────────┘ │
│                                                                 │
└─────────────────────────────────────────────────────────────────┘

2.2 Frontend Architecture
--------------------------
The React Native frontend follows a modular architecture:

src/
├── components/           # Reusable UI components
│   ├── Header/         # User header with navigation
│   └── ThemeComponents/ # Themed UI components
├── screens/            # Screen components
│   ├── AuthFlow/       # Authentication screens
│   └── HomeStack/      # Main application screens
├── navigation/          # Navigation configuration
├── context/            # React Context providers
├── store/              # Redux store and slices
├── service/            # API services and data layer
├── utils/              # Utility functions and constants
└── types/              # TypeScript type definitions

2.3 Backend Architecture
-------------------------
The .NET Core backend follows a layered architecture:

Controllers/
├── AuthController      # Authentication endpoints
├── ImageAnalysisController # Image processing endpoints
└── UserController      # User management endpoints

Services/
├── AuthService         # Authentication business logic
├── ImageAnalysisService # AI analysis business logic
└── UserService        # User management business logic

Models/
├── User               # User entity
├── AnalysisResult     # Analysis result entity
└── IrrigationPlan     # Irrigation plan entity

================================================================================
3. FUNCTIONAL REQUIREMENTS
================================================================================

3.1 User Authentication System
------------------------------

3.1.1 User Registration
- Users can create accounts with username, email, and password
- Email validation and password strength requirements
- Automatic navigation to login screen after successful registration

3.1.2 User Login
- Email and password authentication
- JWT token-based session management
- Remember me functionality
- Automatic login state persistence

3.1.3 Password Management
- Forgot password functionality
- Password reset via email
- Secure password storage with hashing

3.1.4 Session Management
- Automatic session validation on app startup
- Secure token storage using AsyncStorage
- Automatic logout on token expiration

3.2 Field Analysis System
--------------------------

3.2.1 Image Capture and Selection
- Camera integration for field photography
- Gallery access for existing images
- Image quality optimization (0.8 quality, 200px height)
- Permission handling for camera and gallery access

3.2.2 AI-Powered Analysis
- Image upload to backend for AI processing
- Crop type identification
- Soil condition assessment
- Moisture level analysis
- Weather condition integration

3.2.3 Analysis Results Display
- Immediate action recommendations with urgency levels
- Field information display (crop type, soil condition, moisture, temperature)
- Irrigation schedule generation
- Confidence score display

3.3 Irrigation Management
-------------------------

3.3.1 Smart Scheduling
- AI-generated irrigation schedules
- Weather-based adjustments
- Water amount calculations in liters, buckets, and cans
- Urgency-based prioritization

3.3.2 Water Amount Calculations
- Bucket measurements (15L buckets)
- Can measurements (10L cans)
- Total liter calculations
- Precision to 1 decimal place

3.4 User Interface and Navigation
----------------------------------

3.4.1 Navigation Structure
- Bottom tab navigation with 5 main sections
- Stack navigation for screen transitions
- Authentication flow separation
- Deep linking support

3.4.2 Theme System
- Light and dark theme support
- Consistent color scheme
- Dynamic theme switching
- Responsive design for different screen sizes

3.5 Data Management
--------------------

3.5.1 Local Storage
- AsyncStorage for user session data
- Secure token storage
- Offline data caching
- Data persistence across app restarts

3.5.2 State Management
- Redux Toolkit for global state
- User state management
- Authentication state tracking
- Loading state management

================================================================================
4. NON-FUNCTIONAL REQUIREMENTS
================================================================================

4.1 Performance Requirements
-----------------------------
- App startup time: < 3 seconds
- Image analysis response time: < 30 seconds
- API response time: < 10 seconds
- Smooth 60fps animations
- Memory usage: < 150MB

4.2 Security Requirements
-------------------------
- JWT token-based authentication
- Secure password hashing
- HTTPS communication
- Input validation and sanitization
- Secure local storage

4.3 Usability Requirements
--------------------------
- Intuitive user interface
- Consistent navigation patterns
- Accessibility support
- Multi-language support (future)
- Offline functionality for basic features

4.4 Compatibility Requirements
------------------------------
- Android 6.0+ (API level 23+)
- iOS 11.0+
- React Native 0.81.0
- Node.js 18+
- .NET Core 6.0+

================================================================================
5. DATA MODELS AND ENTITY RELATIONSHIPS
================================================================================

5.1 Entity Relationship Diagram (ERD)
--------------------------------------

┌─────────────────────────────────────────────────────────────────┐
│                        AQUABOT DATABASE ERD                    │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ┌─────────────┐     ┌─────────────────┐     ┌──────────────┐ │
│  │    User     │     │  AnalysisResult │     │ IrrigationPlan│ │
│  │             │     │                 │     │              │ │
│  │ • id (PK)   │────►│ • id (PK)       │────►│ • id (PK)    │ │
│  │ • userName  │     │ • userId (FK)   │     │ • analysisId │ │
│  │ • email     │     │ • imagePath     │     │ • planId     │ │
│  │ • password  │     │ • cropType      │     │ • startDate  │ │
│  │ • createdAt │     │ • soilCondition │     │ • endDate    │ │
│  │ • updatedAt │     │ • moistureLevel │     │ • totalDays  │ │
│  └─────────────┘     │ • temperature   │     │ • status     │ │
│                      │ • weather       │     └──────────────┘ │
│                      │ • confidence    │                      │
│                      │ • analyzedAt    │     ┌──────────────┐ │
│                      │ • createdAt     │     │ Irrigation   │ │
│                      └─────────────────┘     │ Schedule     │ │
│                                              │              │ │
│                                              │ • id (PK)    │ │
│                                              │ • planId (FK)│ │
│                                              │ • date       │ │
│                                              │ • waterLiters│ │
│                                              │ • urgency    │ │
│                                              │ • weather    │ │
│                                              │ • temperature│ │
│                                              └──────────────┘ │
│                                                                 │
└─────────────────────────────────────────────────────────────────┘

5.2 Data Models
---------------

5.2.1 User Model
```
User {
  id: string (Primary Key)
  userName: string (Required, Unique)
  email: string (Required, Unique)
  password: string (Required, Hashed)
  farmLocation?: string (Optional)
  createdAt: DateTime
  updatedAt: DateTime
  isActive: boolean
}
```

5.2.2 AnalysisResult Model
```
AnalysisResult {
  id: number (Primary Key)
  userId: string (Foreign Key to User)
  imagePath: string (Required)
  cropType: string
  soilCondition: string
  soilMoisture: number (Percentage)
  cropHealth: string
  fieldAreaM2: number
  location: string
  temperature: number (Celsius)
  weather: string
  confidence: number (0-100)
  analyzedAt: DateTime
  createdAt: DateTime
}
```

5.2.3 IrrigationPlan Model
```
IrrigationPlan {
  id: number (Primary Key)
  analysisId: number (Foreign Key to AnalysisResult)
  planId: number (Unique)
  startDate: DateTime
  endDate: DateTime
  totalDays: number
  status: string (Active, Completed, Cancelled)
  createdAt: DateTime
}
```

5.2.4 IrrigationSchedule Model
```
IrrigationSchedule {
  id: number (Primary Key)
  planId: number (Foreign Key to IrrigationPlan)
  date: DateTime
  waterLiters: number
  waterBuckets: number
  waterCans: number
  urgency: string (High, Medium, Low)
  expectedTemp: number
  expectedWeather: string
  isCompleted: boolean
}
```

5.2.5 ImmediateAction Model
```
ImmediateAction {
  id: number (Primary Key)
  analysisId: number (Foreign Key to AnalysisResult)
  needWaterNow: boolean
  waterAmountLiters: number
  waterAmountBuckets: number
  waterAmountCans: number
  urgencyLevel: string (High, Medium, Low)
  simpleInstruction: string
  createdAt: DateTime
}
```

================================================================================
6. API SPECIFICATIONS
================================================================================

6.1 Authentication Endpoints
-----------------------------

6.1.1 User Registration
```
POST /api/Auth/register
Content-Type: application/json

Request Body:
{
  "userName": "string",
  "email": "string",
  "password": "string"
}

Response:
{
  "success": boolean,
  "message": "string",
  "data": {
    "token": "string",
    "user": {
      "id": "string",
      "userName": "string",
      "email": "string"
    }
  }
}
```

6.1.2 User Login
```
POST /api/Auth/login
Content-Type: application/json

Request Body:
{
  "email": "string",
  "password": "string"
}

Response:
{
  "success": boolean,
  "message": "string",
  "data": {
    "token": "string",
    "user": {
      "id": "string",
      "userName": "string",
      "email": "string"
    }
  }
}
```

6.1.3 Forgot Password
```
POST /api/Auth/forgot-password
Content-Type: application/json

Request Body:
{
  "email": "string"
}

Response:
{
  "success": boolean,
  "message": "string"
}
```

6.1.4 Reset Password
```
POST /api/Auth/reset-password
Content-Type: application/json

Request Body:
{
  "email": "string",
  "newPassword": "string"
}

Response:
{
  "success": boolean,
  "message": "string"
}
```

6.2 Image Analysis Endpoints
-----------------------------

6.2.1 Analyze and Plan
```
POST /api/ImageAnalysis/analyze-and-plan
Content-Type: multipart/form-data
Authorization: Bearer {token}

Request Body (FormData):
- Image: File (Required)
- CropName: string (Optional)
- FieldAreaM2: number (Optional)
- FieldName: string (Optional)

Response:
{
  "success": boolean,
  "message": "string",
  "analysisId": number,
  "confidence": number,
  "immediateAction": {
    "needWaterNow": boolean,
    "waterAmountLiters": number,
    "waterAmountBuckets": number,
    "waterAmountCans": number,
    "urgencyLevel": "string",
    "simpleInstruction": "string"
  },
  "fieldInfo": {
    "soilCondition": "string",
    "soilMoisture": number,
    "cropType": "string",
    "cropHealth": "string",
    "fieldAreaM2": number,
    "location": "string",
    "temperature": number,
    "weather": "string"
  },
  "irrigationSchedule": {
    "planId": number,
    "totalDays": number,
    "nextIrrigationDate": "string",
    "upcomingIrrigations": [
      {
        "date": "string",
        "dateDisplay": "string",
        "waterLiters": number,
        "waterBuckets": number,
        "waterCans": number,
        "urgency": "string",
        "expectedTemp": number,
        "expectedWeather": "string"
      }
    ]
  },
  "analyzedAt": "string"
}
```

================================================================================
7. USER INTERFACE SPECIFICATIONS
================================================================================

7.1 Screen Flow and Navigation
-------------------------------

7.1.1 Authentication Flow
```
Splash Screen → Onboarding → Sign Up/Sign In → Email Verification → Home
```

7.1.2 Main Application Flow
```
Home (Dashboard) → Field Analysis → AI Chat → Government Guidelines → Profile → Settings
```

7.2 Screen Specifications
-------------------------

7.2.1 Splash Screen
- Animated logo with fade-in effect
- App name and tagline display
- Loading animation with pulse effect
- Automatic navigation after 4 seconds
- Background image with gradient overlay

7.2.2 Onboarding Screen
- Welcome message and app description
- Feature highlights with icons
- Register and Login buttons
- Background image with logo

7.2.3 Authentication Screens
- Sign Up: Username, Email, Password, Confirm Password
- Sign In: Email, Password, Remember Me checkbox
- Forgot Password: Email input
- Form validation with error messages
- Navigation between screens

7.2.4 Home Dashboard
- User greeting with personalized message
- Quick action buttons
- Navigation to other sections
- User profile access

7.2.5 Field Analysis Screen
- Image picker with camera/gallery options
- Optional form fields (Crop Name, Field Name, Field Area)
- Analysis button with loading state
- Results display with cards for:
  - Immediate Action (with urgency color coding)
  - Field Information (grid layout)
  - Irrigation Schedule (timeline view)
- Confidence score display

7.2.6 AI Chat Screen
- Chat interface (coming soon placeholder)
- Message input field
- Send button
- Chat history display

7.2.7 Government Guidelines Screen
- Guidelines list (coming soon placeholder)
- Search functionality
- Category filters
- Detailed guideline view

7.2.8 Profile Screen
- User information display
- Profile picture
- Account settings
- Edit profile functionality

7.2.9 Settings Screen
- User information display
- Logout button
- Theme settings
- Notification preferences
- About section

7.3 Component Specifications
----------------------------

7.3.1 Header Component
- User profile picture
- Greeting message
- Navigation buttons (Profile, Location, Notifications, Settings)
- Title display
- Responsive design

7.3.2 Theme Components
- ThemeButton: Customizable button with gradient support
- ThemeInput: Input field with icons and validation
- ThemeText: Themed text component
- ThemeCheckBox: Custom checkbox component
- OnboardingCard: Card component for onboarding

7.3.3 Navigation Components
- Bottom Tab Navigator with 5 tabs
- Tab icons with gradient effects
- Active state indicators
- Smooth transitions

================================================================================
8. BUSINESS PROCESSES AND WORKFLOWS
================================================================================

8.1 User Registration Process
------------------------------

1. User opens app → Splash screen displays
2. First-time user → Onboarding screen
3. User taps "Register" → Sign Up screen
4. User fills registration form:
   - Username (required)
   - Email (required, validated)
   - Password (required, strength validated)
   - Confirm Password (must match)
5. Form validation:
   - Check required fields
   - Validate email format
   - Validate password strength
   - Confirm password match
6. Submit registration:
   - Send POST request to /api/Auth/register
   - Display loading state
   - Handle success/error responses
7. Success → Navigate to Sign In screen
8. Error → Display error message, allow retry

8.2 User Authentication Process
--------------------------------

1. User enters credentials on Sign In screen
2. Form validation:
   - Check required fields
   - Validate email format
3. Submit login:
   - Send POST request to /api/Auth/login
   - Display loading state
4. Handle response:
   - Success: Store user data and token in AsyncStorage
   - Update Redux store with user information
   - Navigate to Home screen
   - Error: Display specific error message
5. Session persistence:
   - Check stored token on app startup
   - Validate token with backend
   - Auto-login if valid token exists

8.3 Field Analysis Process
---------------------------

1. User navigates to Field Analysis screen
2. Image selection:
   - Tap image picker → Show camera/gallery options
   - Request permissions (camera/gallery)
   - Select/capture image
   - Display selected image preview
3. Optional form completion:
   - Crop Name (optional)
   - Field Name (optional)
   - Field Area in m² (optional)
4. Analysis submission:
   - Create FormData with image and optional fields
   - Send POST request to /api/ImageAnalysis/analyze-and-plan
   - Display loading state with progress indicator
5. Results processing:
   - Parse response data
   - Display immediate action card with urgency color
   - Show field information in grid layout
   - Display irrigation schedule timeline
   - Show confidence score
6. Error handling:
   - Network errors → Retry option
   - Analysis failures → Clear form, allow retry
   - Timeout errors → Extended timeout message

8.4 Irrigation Planning Process
--------------------------------

1. Analysis results received from AI
2. Immediate action determination:
   - Check if water is needed now
   - Calculate water amounts (liters, buckets, cans)
   - Determine urgency level (High/Medium/Low)
   - Generate simple instruction
3. Field information extraction:
   - Crop type identification
   - Soil condition assessment
   - Moisture level calculation
   - Temperature and weather data
4. Schedule generation:
   - Create irrigation plan with total days
   - Generate upcoming irrigation events
   - Calculate water requirements for each day
   - Factor in weather predictions
5. Display results:
   - Immediate action card with color-coded urgency
   - Field information grid
   - Irrigation schedule timeline
   - Confidence score indicator

8.5 Data Persistence Process
-----------------------------

1. User session management:
   - Store JWT token in AsyncStorage
   - Store user data in AsyncStorage
   - Update Redux store on login
2. Analysis results storage:
   - Store analysis results locally
   - Cache images for offline access
   - Maintain analysis history
3. Offline functionality:
   - Cache user data for offline access
   - Store analysis results locally
   - Sync when connection restored

================================================================================
9. SECURITY SPECIFICATIONS
================================================================================

9.1 Authentication Security
---------------------------
- JWT token-based authentication
- Token expiration handling
- Secure token storage in AsyncStorage
- Automatic token refresh
- Session timeout management

9.2 Data Security
-----------------
- HTTPS communication for all API calls
- Password hashing with bcrypt
- Input validation and sanitization
- SQL injection prevention
- XSS protection

9.3 Local Storage Security
---------------------------
- Encrypted storage for sensitive data
- Secure token storage
- Data cleanup on logout
- No sensitive data in plain text

9.4 API Security
-----------------
- CORS configuration
- Rate limiting
- Request validation
- Error message sanitization
- Audit logging

================================================================================
10. PERFORMANCE SPECIFICATIONS
================================================================================

10.1 Frontend Performance
--------------------------
- App startup time: < 3 seconds
- Screen transition: < 300ms
- Image loading: < 2 seconds
- API response handling: < 1 second
- Memory usage: < 150MB
- Battery optimization for background tasks

10.2 Backend Performance
-------------------------
- API response time: < 10 seconds
- Image analysis time: < 30 seconds
- Database query optimization
- Caching for frequently accessed data
- Load balancing for high traffic

10.3 Network Performance
------------------------
- Offline functionality for basic features
- Data compression for API responses
- Image optimization before upload
- Progressive loading for large datasets
- Connection timeout handling

================================================================================
11. TESTING SPECIFICATIONS
================================================================================

11.1 Unit Testing
-----------------
- Component testing with React Native Testing Library
- Service layer testing
- Redux store testing
- Utility function testing
- API service testing

11.2 Integration Testing
-------------------------
- API integration testing
- Navigation flow testing
- Authentication flow testing
- Image upload testing
- Data persistence testing

11.3 End-to-End Testing
------------------------
- Complete user journey testing
- Cross-platform testing
- Performance testing
- Security testing
- Accessibility testing

11.4 Manual Testing
-------------------
- Device compatibility testing
- Network condition testing
- User experience testing
- Error handling testing
- Edge case testing

================================================================================
12. DEPLOYMENT SPECIFICATIONS
================================================================================

12.1 Frontend Deployment
-------------------------
- React Native build configuration
- Android APK generation
- iOS IPA generation
- Code signing setup
- App store deployment

12.2 Backend Deployment
-----------------------
- .NET Core deployment
- Database setup and migration
- Environment configuration
- SSL certificate setup
- Load balancer configuration

12.3 Environment Configuration
-------------------------------
- Development environment setup
- Staging environment setup
- Production environment setup
- Environment variable management
- Secret management

================================================================================
13. MAINTENANCE AND SUPPORT
================================================================================

13.1 Monitoring
----------------
- Application performance monitoring
- Error tracking and logging
- User analytics
- API usage monitoring
- Database performance monitoring

13.2 Updates and Maintenance
----------------------------
- Regular security updates
- Feature updates and enhancements
- Bug fixes and patches
- Database maintenance
- Performance optimizations

13.3 Support and Documentation
-------------------------------
- User documentation
- API documentation
- Developer documentation
- Troubleshooting guides
- FAQ and support resources

================================================================================
14. FUTURE ENHANCEMENTS
================================================================================

14.1 Planned Features
----------------------
- Real-time weather integration
- IoT sensor integration
- Advanced AI models
- Multi-language support
- Offline mode improvements
- Push notifications
- Social features
- Advanced analytics

14.2 Scalability Considerations
--------------------------------
- Microservices architecture
- Database scaling
- CDN integration
- Caching strategies
- Load balancing
- Auto-scaling

================================================================================
15. APPENDICES
================================================================================

15.1 API Endpoints Summary
---------------------------
Authentication:
- POST /api/Auth/register
- POST /api/Auth/login
- POST /api/Auth/forgot-password
- POST /api/Auth/reset-password

Image Analysis:
- POST /api/ImageAnalysis/analyze-and-plan

15.2 Database Schema
---------------------
See Entity Relationship Diagram in Section 5.1

15.3 Configuration Files
-------------------------
- package.json (Frontend dependencies)
- tsconfig.json (TypeScript configuration)
- metro.config.js (Metro bundler configuration)
- babel.config.js (Babel configuration)
- jest.config.js (Testing configuration)

15.4 Environment Variables
---------------------------
Frontend:
- API_BASE_URL
- ENVIRONMENT (development/production)

Backend:
- CONNECTION_STRING
- JWT_SECRET
- API_KEY
- ENVIRONMENT

================================================================================
END OF DOCUMENT
================================================================================

This comprehensive SRS document provides detailed specifications for the AquaBot 
application, covering all aspects from architecture and data models to business 
processes and deployment considerations. The document serves as a complete 
reference for development, testing, and maintenance of the AquaBot system.
